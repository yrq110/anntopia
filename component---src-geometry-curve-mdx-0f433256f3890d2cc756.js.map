{"version":3,"sources":["webpack:///../src/geometry/curve.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","CubicSpline","CubicParameterSpline","BoundaryCondition","createQuasiUniformKnots","createNonUniformKnots","HermiteSpline","CardinalSpline","BezierSpline","BSpline","NURBS","Canvas","dataPoints","spline","setConfig","boundary","Clamped","points","getInterpolation","lines","NotAKnot","derivatives","tension","setStep","k","knots","insertKnot","isMDXComponent"],"mappings":"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","file":"component---src-geometry-curve-mdx-0f433256f3890d2cc756.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/didi/Desktop/project/anntopia/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { CubicSpline, CubicParameterSpline, BoundaryCondition, createQuasiUniformKnots, createNonUniformKnots, HermiteSpline, CardinalSpline, BezierSpline, BSpline, NURBS } from '@anntopia/geometry';\nimport Canvas from '../components/Canvas';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Provide multiple ways to do spline interpolation:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Cubic Spline`}</li>\n      <li parentName=\"ul\">{`Hermite Spline`}</li>\n      <li parentName=\"ul\">{`Bezier Spline`}</li>\n      <li parentName=\"ul\">{`B Spline`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"common-params--methods\"\n    }}>{`Common Params & Methods:`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`step`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`const spline = new SplineCtor(dataPoints)\nspline.setStep(0.001)\n`}</code></pre>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`getInterpolation()`}</p>\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-js\"\n          }}>{`const points = spline.getInterpolation()\n`}</code></pre>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"cubicspline\"\n    }}>{`CubicSpline`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const dataPoints = [50, 250, 100, 50, 200, 150, 250, 70, 380, 100, 450, 250]\\n  const spline = new CubicSpline(dataPoints)\\n  spline.setConfig({\\n    boundary: BoundaryCondition.Clamped,\\n  })\\n  const points = spline.getInterpolation()\\n  return <Canvas points={dataPoints} lines={points} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CubicSpline,\n      CubicParameterSpline,\n      BoundaryCondition,\n      createQuasiUniformKnots,\n      createNonUniformKnots,\n      HermiteSpline,\n      CardinalSpline,\n      BezierSpline,\n      BSpline,\n      NURBS,\n      Canvas,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const dataPoints = [50, 250, 100, 50, 200, 150, 250, 70, 380, 100, 450, 250];\n        const spline = new CubicSpline(dataPoints);\n        spline.setConfig({\n          boundary: BoundaryCondition.Clamped\n        });\n        const points = spline.getInterpolation();\n        return <Canvas points={dataPoints} lines={points} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"cubicparameterspline\"\n    }}>{`CubicParameterSpline`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\\n  const spline = new CubicParameterSpline(dataPoints)\\n  spline.setConfig({\\n    boundary: BoundaryCondition.NotAKnot,\\n  })\\n  const points = spline.getInterpolation()\\n  return <Canvas points={dataPoints} lines={points} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CubicSpline,\n      CubicParameterSpline,\n      BoundaryCondition,\n      createQuasiUniformKnots,\n      createNonUniformKnots,\n      HermiteSpline,\n      CardinalSpline,\n      BezierSpline,\n      BSpline,\n      NURBS,\n      Canvas,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250];\n        const spline = new CubicParameterSpline(dataPoints);\n        spline.setConfig({\n          boundary: BoundaryCondition.NotAKnot\n        });\n        const points = spline.getInterpolation();\n        return <Canvas points={dataPoints} lines={points} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"hermitespline\"\n    }}>{`HermiteSpline`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\\n  const derivatives = [100, 50, 0, -100, 200, 10, 0, 100, 100, 20, 0, -100]\\n  const spline = new HermiteSpline(dataPoints)\\n  spline.setConfig({ derivatives })\\n  const points = spline.getInterpolation()\\n  return <Canvas points={dataPoints} lines={points} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CubicSpline,\n      CubicParameterSpline,\n      BoundaryCondition,\n      createQuasiUniformKnots,\n      createNonUniformKnots,\n      HermiteSpline,\n      CardinalSpline,\n      BezierSpline,\n      BSpline,\n      NURBS,\n      Canvas,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250];\n        const derivatives = [100, 50, 0, -100, 200, 10, 0, 100, 100, 20, 0, -100];\n        const spline = new HermiteSpline(dataPoints);\n        spline.setConfig({\n          derivatives\n        });\n        const points = spline.getInterpolation();\n        return <Canvas points={dataPoints} lines={points} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"cardinalspline\"\n    }}>{`CardinalSpline`}</h2>\n    <Playground __position={3} __code={'() => {\\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\\n  const spline = new CardinalSpline(dataPoints)\\n  spline.setConfig({ tension: 0.2 })\\n  const points = spline.getInterpolation()\\n  return <Canvas points={dataPoints} lines={points} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CubicSpline,\n      CubicParameterSpline,\n      BoundaryCondition,\n      createQuasiUniformKnots,\n      createNonUniformKnots,\n      HermiteSpline,\n      CardinalSpline,\n      BezierSpline,\n      BSpline,\n      NURBS,\n      Canvas,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250];\n        const spline = new CardinalSpline(dataPoints);\n        spline.setConfig({\n          tension: 0.2\n        });\n        const points = spline.getInterpolation();\n        return <Canvas points={dataPoints} lines={points} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"bezierspline\"\n    }}>{`BezierSpline`}</h2>\n    <Playground __position={4} __code={'() => {\\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\\n  const spline = new BezierSpline(dataPoints)\\n  spline.setConfig({ tension: 0.7 })\\n  const points = spline.getInterpolation()\\n  return <Canvas points={dataPoints} lines={points} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CubicSpline,\n      CubicParameterSpline,\n      BoundaryCondition,\n      createQuasiUniformKnots,\n      createNonUniformKnots,\n      HermiteSpline,\n      CardinalSpline,\n      BezierSpline,\n      BSpline,\n      NURBS,\n      Canvas,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250];\n        const spline = new BezierSpline(dataPoints);\n        spline.setConfig({\n          tension: 0.7\n        });\n        const points = spline.getInterpolation();\n        return <Canvas points={dataPoints} lines={points} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"bspine\"\n    }}>{`BSpine`}</h2>\n    <Playground __position={5} __code={'() => {\\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\\n  const spline = new BSpline(dataPoints)\\n  spline.setStep(0.001)\\n  spline.setConfig({\\n    k: 4,\\n    knots: createQuasiUniformKnots({ points: dataPoints, k: 4 }),\\n  })\\n  const points = spline.getInterpolation()\\n  return <Canvas points={dataPoints} lines={points} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CubicSpline,\n      CubicParameterSpline,\n      BoundaryCondition,\n      createQuasiUniformKnots,\n      createNonUniformKnots,\n      HermiteSpline,\n      CardinalSpline,\n      BezierSpline,\n      BSpline,\n      NURBS,\n      Canvas,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250];\n        const spline = new BSpline(dataPoints);\n        spline.setStep(0.001);\n        spline.setConfig({\n          k: 4,\n          knots: createQuasiUniformKnots({\n            points: dataPoints,\n            k: 4\n          })\n        });\n        const points = spline.getInterpolation();\n        return <Canvas points={dataPoints} lines={points} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"nurbs\"\n    }}>{`NURBS`}</h2>\n    <Playground __position={6} __code={'() => {\\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\\n  const spline = new NURBS(dataPoints)\\n  spline.setStep(0.001)\\n  spline.setConfig({\\n    k: 4,\\n    knots: createNonUniformKnots({ points: dataPoints, k: 4 }),\\n  })\\n  spline.insertKnot(0.35)\\n  const points = spline.getInterpolation()\\n  return <Canvas points={dataPoints} lines={points} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      CubicSpline,\n      CubicParameterSpline,\n      BoundaryCondition,\n      createQuasiUniformKnots,\n      createNonUniformKnots,\n      HermiteSpline,\n      CardinalSpline,\n      BezierSpline,\n      BSpline,\n      NURBS,\n      Canvas,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250];\n        const spline = new NURBS(dataPoints);\n        spline.setStep(0.001);\n        spline.setConfig({\n          k: 4,\n          knots: createNonUniformKnots({\n            points: dataPoints,\n            k: 4\n          })\n        });\n        spline.insertKnot(0.35);\n        const points = spline.getInterpolation();\n        return <Canvas points={dataPoints} lines={points} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"custom-curve\"\n    }}>{`Custom Curve`}</h2>\n    <p>{`If you want to create a new type curve/spline, can extend AbstractCurve to implement.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}