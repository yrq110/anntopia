{"version":3,"sources":["webpack:///../src/geometry/area.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Chan","Shoelace","VoronoiDiagram","LargestEmptyCircle","DelaunayTriangulation","Canvas","random","polygonPoints","points","edges","map","edge","flat","polygons","circle","circles","polygon","area","isMDXComponent"],"mappings":"mTAYaA,G,UAAe,S,uMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,UAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,YADR,YAGA,6BACA,kBACE,GAAM,kBADR,kBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,sMAAuMC,SAAO,GAC/OJ,QACAH,kBACAQ,eACAC,UACAC,YACAC,oBACAC,gCACAC,wCACAC,8CACAC,WACAC,WACAC,mBAZ+O,gBAa/OjB,IAb+O,EAc/OH,eAd+O,GAe9OO,QAAQ,eACZ,WACK,IAAMc,EAASF,YAAO,GAAI,GAAI,IAAK,IAAK,GAAI,IACxCG,EAAQP,yBAAeM,GAE3B,OADAC,EAAQA,EAAMC,KAAI,SAAAC,GAAI,OAAIA,EAAKC,UACxB,YAAC,IAAD,CAAQJ,OAAQA,EAAQK,SAAUJ,EAAOf,QAAQ,cAG5D,kBACE,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,sKAAuKC,SAAO,GAC/MJ,QACAH,kBACAQ,eACAC,UACAC,YACAC,oBACAC,gCACAC,wCACAC,8CACAC,WACAC,WACAC,mBAZ+M,gBAa/MjB,IAb+M,EAc/MH,eAd+M,GAe9MO,QAAQ,eACZ,WACK,IAAMc,EAASF,YAAO,GAAI,IAAK,IAAK,IAAK,GAAI,IACvCQ,EAASX,6BAAmBK,GAClC,OAAO,YAAC,IAAD,CAAQA,OAAQA,EAAQO,QAAS,CAACD,GAASpB,QAAQ,cAG9D,kBACE,GAAM,YADR,YAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qQAAsQC,SAAO,GAC9SJ,QACAH,kBACAQ,eACAC,UACAC,YACAC,oBACAC,gCACAC,wCACAC,8CACAC,WACAC,WACAC,mBAZ8S,gBAa9SjB,IAb8S,EAc9SH,eAd8S,GAe7SO,QAAQ,eACZ,WACK,IAAMc,EAASF,YAAO,GAAI,IAAK,IAAK,IAAK,GAAI,IACvCU,EAAUhB,eAAKQ,GACfS,EAAOhB,mBAASe,GACtB,OAAO,4BACP,YAAC,IAAD,CAAQR,OAAQQ,EAASH,SAAU,CAACG,GAAUtB,QAAQ,WACtD,wCAAoBuB,EAApB,e,qMAQR1B,EAAW2B,gBAAiB","file":"component---src-geometry-area-mdx-0d05447f0bb3bd1bb5ec.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/didi/Desktop/project/anntopia/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Chan, Shoelace, VoronoiDiagram, LargestEmptyCircle, DelaunayTriangulation } from '@anntopia/geometry';\nimport Canvas from '../components/Canvas';\nimport { random, polygonPoints } from '../components/util';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Todo`}</p>\n    <h2 {...{\n      \"id\": \"voronoidiagram\"\n    }}>{`VoronoiDiagram`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const points = random(30, 50, 350, 250, 50, 50)\\n  let edges = VoronoiDiagram(points)\\n  edges = edges.map(edge => edge.flat())\\n  return <Canvas points={points} polygons={edges} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Chan,\n      Shoelace,\n      VoronoiDiagram,\n      LargestEmptyCircle,\n      DelaunayTriangulation,\n      Canvas,\n      random,\n      polygonPoints,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const points = random(30, 50, 350, 250, 50, 50);\n        let edges = VoronoiDiagram(points);\n        edges = edges.map(edge => edge.flat());\n        return <Canvas points={points} polygons={edges} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"largestemptycircle\"\n    }}>{`LargestEmptyCircle`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const points = random(40, 100, 350, 250, 50, 50)\\n  const circle = LargestEmptyCircle(points)\\n  return <Canvas points={points} circles={[circle]} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Chan,\n      Shoelace,\n      VoronoiDiagram,\n      LargestEmptyCircle,\n      DelaunayTriangulation,\n      Canvas,\n      random,\n      polygonPoints,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const points = random(40, 100, 350, 250, 50, 50);\n        const circle = LargestEmptyCircle(points);\n        return <Canvas points={points} circles={[circle]} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"shoelace\"\n    }}>{`Shoelace`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const points = random(40, 100, 350, 250, 50, 50)\\n  const polygon = Chan(points)\\n  const area = Shoelace(polygon)\\n  return (\\n    <>\\n      <Canvas points={polygon} polygons={[polygon]} />\\n      <div>Polygon area: {area} </div>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Chan,\n      Shoelace,\n      VoronoiDiagram,\n      LargestEmptyCircle,\n      DelaunayTriangulation,\n      Canvas,\n      random,\n      polygonPoints,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const points = random(40, 100, 350, 250, 50, 50);\n        const polygon = Chan(points);\n        const area = Shoelace(polygon);\n        return <>\n        <Canvas points={polygon} polygons={[polygon]} mdxType=\"Canvas\" />\n        <div>Polygon area: {area} </div>\n      </>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}