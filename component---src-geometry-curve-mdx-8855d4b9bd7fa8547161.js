(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{bCqL:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return s})),n.d(t,"default",(function(){return u}));var a=n("IKa1"),i=n("ITlK"),r=(n("r0ML"),n("V0Ug")),l=n("sN0p"),b=n("EeHy"),o=n("NIMi"),p=n("S48i"),c=n("cbvu"),s=(n("xH0s"),{});void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/geometry/curve.mdx"}});var m={_frontmatter:s},d=l.a;function u(e){var t,n,u,O,j,N,g,f=e.components,y=Object(i.a)(e,["components"]);return Object(r.b)(d,Object(a.a)({},m,y,{components:f,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"overview"},"Overview"),Object(r.b)("p",null,"Contains these main types of interpolating spline:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#cubic-spline"},"Cubic Spline")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#hermite-spline"},"Hermite Spline")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#bezier-spline"},"Bezier Spline")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#b-spline"},"B Spline"))),Object(r.b)("h3",{id:"common-props"},"Common Props"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"dataPoints")," - The data points of spline")),Object(r.b)("h3",{id:"common-methods"},"Common Methods"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"constructor(dataPoints: number[], config?: Partial<Config",">",", step?: number)"),Object(r.b)("li",{parentName:"ul"},"getInterpolation(forceUpdate: boolean = true)"),Object(r.b)("li",{parentName:"ul"},"setConfig(config: Object) & getConfig()"),Object(r.b)("li",{parentName:"ul"},"setStep(step: number) & getStep()")),Object(r.b)("h3",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-ts"},"import { BezierSpline } from '@anntopia/geometry'\nconst dataPoints = [\n  50, 250,\n  200, 150,\n  100, 50,\n  250, 70,\n  400, 50,\n  450, 250,\n]\nconst spline = new BezierSpline(dataPoints, { tension: 0.5 }, 0.01)\nlet points = spline.getInterpolation() // get interpolatin points\n// spline.dataPoints: [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n// points: [50, 250, 52.67857360839844, 249.23570251464844, 55.333335876464844, 248.4666748046875, ...]\nspline.setConfig({ tension: 0.7 }) // change config\nspline.setStep(0.001) // change step\npoints = spline.getInterpolation() // get interpolating points with the new config and step\n// points: [50, 250, 50.256561279296875, 249.97325134277344, 50.512908935546875, 249.94638061523438, ...]\n")),Object(r.b)("h2",{id:"cubic-spline"},"Cubic Spline"),Object(r.b)("h3",{id:"config"},"Config"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"name"),Object(r.b)("th",{parentName:"tr",align:null},"type"),Object(r.b)("th",{parentName:"tr",align:null},"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"boundary"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"0 - natural; 1 - clamped; 2 - not-a-knot")),Object(r.b)("td",{parentName:"tr",align:null},"Boundary type. Default is ",Object(r.b)("inlineCode",{parentName:"td"},"0"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"derivatives"),Object(r.b)("td",{parentName:"tr",align:null},Object(r.b)("inlineCode",{parentName:"td"},"[number, number]")),Object(r.b)("td",{parentName:"tr",align:null},"First derivatives of x in start and end points. Need to set this if the boundary type is 0(natural). Default is ",Object(r.b)("inlineCode",{parentName:"td"},"[0, 0]"))))),Object(r.b)("h3",{id:"playground"},"Playground"),Object(r.b)(b.c,{__position:0,__code:"() => {\n  // import { CubicSpline, BoundaryCondition } from '@anntopia/geometry'\n  const dataPoints = [50, 250, 100, 50, 200, 150, 250, 70, 380, 100, 450, 250]\n  const spline = new CubicSpline(dataPoints)\n  spline.setConfig({\n    boundary: BoundaryCondition.Clamped, // or 1\n  })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={[points]} />\n}",__scope:(t={props:y,DefaultLayout:l.a,Playground:b.c,Props:b.d,CubicSpline:o.i,CubicParameterSpline:o.h,BoundaryCondition:o.d,createQuasiUniformKnots:o.z,createNonUniformKnots:o.y,HermiteSpline:o.m,CardinalSpline:o.e,BezierSpline:o.c,BSpline:o.b,NURBS:o.u,Canvas:p.a,uniform:c.a},t.DefaultLayout=l.a,t._frontmatter=s,t),mdxType:"Playground"},(function(){var e=[50,250,100,50,200,150,250,70,380,100,450,250],t=new o.i(e);t.setConfig({boundary:o.d.Clamped});var n=t.getInterpolation();return Object(r.b)(p.a,{points:e,lines:[n],mdxType:"Canvas"})})),Object(r.b)("h2",{id:"cubic-parameter-spline"},"Cubic Parameter Spline"),Object(r.b)("h3",{id:"config-1"},"Config"),Object(r.b)("p",null,"Same as the Config in ",Object(r.b)("a",{parentName:"p",href:"#cubic-spline"},"CubicSpline")),Object(r.b)("h3",{id:"playground-1"},"Playground"),Object(r.b)(b.c,{__position:1,__code:"() => {\n  // import { CubicParameterSpline, BoundaryCondition } from '@anntopia/geometry'\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new CubicParameterSpline(dataPoints)\n  spline.setConfig({\n    boundary: BoundaryCondition.NotAKnot,\n  })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={[points]} />\n}",__scope:(n={props:y,DefaultLayout:l.a,Playground:b.c,Props:b.d,CubicSpline:o.i,CubicParameterSpline:o.h,BoundaryCondition:o.d,createQuasiUniformKnots:o.z,createNonUniformKnots:o.y,HermiteSpline:o.m,CardinalSpline:o.e,BezierSpline:o.c,BSpline:o.b,NURBS:o.u,Canvas:p.a,uniform:c.a},n.DefaultLayout=l.a,n._frontmatter=s,n),mdxType:"Playground"},(function(){var e=[50,250,200,150,100,50,250,70,400,50,450,250],t=new o.h(e);t.setConfig({boundary:o.d.NotAKnot});var n=t.getInterpolation();return Object(r.b)(p.a,{points:e,lines:[n],mdxType:"Canvas"})})),Object(r.b)("h2",{id:"hermite-spline"},"Hermite Spline"),Object(r.b)("h3",{id:"config-2"},"Config"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"name"),Object(r.b)("th",{parentName:"tr",align:null},"type"),Object(r.b)("th",{parentName:"tr",align:null},"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"derivatives"),Object(r.b)("td",{parentName:"tr",align:null},"number[]"),Object(r.b)("td",{parentName:"tr",align:null},"First derivatives of x and y in every data points.")))),Object(r.b)("h3",{id:"playground-2"},"Playground"),Object(r.b)(b.c,{__position:2,__code:"() => {\n  // import { HermiteSpline } from '@anntopia/geometry'\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const derivatives = [100, 50, 0, -100, 200, 10, 0, 100, 100, 20, 0, -100]\n  const spline = new HermiteSpline(dataPoints)\n  spline.setConfig({ derivatives })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={[points]} />\n}",__scope:(u={props:y,DefaultLayout:l.a,Playground:b.c,Props:b.d,CubicSpline:o.i,CubicParameterSpline:o.h,BoundaryCondition:o.d,createQuasiUniformKnots:o.z,createNonUniformKnots:o.y,HermiteSpline:o.m,CardinalSpline:o.e,BezierSpline:o.c,BSpline:o.b,NURBS:o.u,Canvas:p.a,uniform:c.a},u.DefaultLayout=l.a,u._frontmatter=s,u),mdxType:"Playground"},(function(){var e=[50,250,200,150,100,50,250,70,400,50,450,250],t=new o.m(e);t.setConfig({derivatives:[100,50,0,-100,200,10,0,100,100,20,0,-100]});var n=t.getInterpolation();return Object(r.b)(p.a,{points:e,lines:[n],mdxType:"Canvas"})})),Object(r.b)("h2",{id:"cardinal-spline"},"Cardinal Spline"),Object(r.b)("h3",{id:"config-3"},"Config"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"name"),Object(r.b)("th",{parentName:"tr",align:null},"type"),Object(r.b)("th",{parentName:"tr",align:null},"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"vs"),Object(r.b)("td",{parentName:"tr",align:null},"[number, number]"),Object(r.b)("td",{parentName:"tr",align:null},"Virtual start point. Default position has the offset by ","[0.01,0.01]"," from the first data point.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"ve"),Object(r.b)("td",{parentName:"tr",align:null},"[number, number]"),Object(r.b)("td",{parentName:"tr",align:null},"Virtual end point. Default position has the offset by ","[0.01,0.01]"," from the end data point.")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"tension"),Object(r.b)("td",{parentName:"tr",align:null},"number"),Object(r.b)("td",{parentName:"tr",align:null},"Tension value, range is ",Object(r.b)("inlineCode",{parentName:"td"},"[0,1]"),". Default is ",Object(r.b)("inlineCode",{parentName:"td"},"0.1"),".")))),Object(r.b)("h3",{id:"playground-3"},"Playground"),Object(r.b)(b.c,{__position:3,__code:"() => {\n  // import { CardinalSpline } from '@anntopia/geometry'\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new CardinalSpline(dataPoints)\n  spline.setConfig({ tension: 0.2 })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={[points]} />\n}",__scope:(O={props:y,DefaultLayout:l.a,Playground:b.c,Props:b.d,CubicSpline:o.i,CubicParameterSpline:o.h,BoundaryCondition:o.d,createQuasiUniformKnots:o.z,createNonUniformKnots:o.y,HermiteSpline:o.m,CardinalSpline:o.e,BezierSpline:o.c,BSpline:o.b,NURBS:o.u,Canvas:p.a,uniform:c.a},O.DefaultLayout=l.a,O._frontmatter=s,O),mdxType:"Playground"},(function(){var e=[50,250,200,150,100,50,250,70,400,50,450,250],t=new o.e(e);t.setConfig({tension:.2});var n=t.getInterpolation();return Object(r.b)(p.a,{points:e,lines:[n],mdxType:"Canvas"})})),Object(r.b)("h2",{id:"bezier-spline"},"Bezier Spline"),Object(r.b)("h3",{id:"config-4"},"Config"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"name"),Object(r.b)("th",{parentName:"tr",align:null},"type"),Object(r.b)("th",{parentName:"tr",align:null},"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"tension"),Object(r.b)("td",{parentName:"tr",align:null},"number"),Object(r.b)("td",{parentName:"tr",align:null},"Tension value, range is ",Object(r.b)("inlineCode",{parentName:"td"},"[0,1]"),". Default is ",Object(r.b)("inlineCode",{parentName:"td"},"0.5"),".")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"closed"),Object(r.b)("td",{parentName:"tr",align:null},"boolean"),Object(r.b)("td",{parentName:"tr",align:null},"Closed curve. Default is ",Object(r.b)("inlineCode",{parentName:"td"},"false"),".")))),Object(r.b)("h3",{id:"playground-4"},"Playground"),Object(r.b)(b.c,{__position:4,__code:"() => {\n  // import { BezierSpline } from '@anntopia/geometry'\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new BezierSpline(dataPoints)\n  spline.setConfig({ tension: 0.7, closed: true })\n  spline.setStep(0.001)\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={[points]} />\n}",__scope:(j={props:y,DefaultLayout:l.a,Playground:b.c,Props:b.d,CubicSpline:o.i,CubicParameterSpline:o.h,BoundaryCondition:o.d,createQuasiUniformKnots:o.z,createNonUniformKnots:o.y,HermiteSpline:o.m,CardinalSpline:o.e,BezierSpline:o.c,BSpline:o.b,NURBS:o.u,Canvas:p.a,uniform:c.a},j.DefaultLayout=l.a,j._frontmatter=s,j),mdxType:"Playground"},(function(){var e=[50,250,200,150,100,50,250,70,400,50,450,250],t=new o.c(e);t.setConfig({tension:.7,closed:!0}),t.setStep(.001);var n=t.getInterpolation();return Object(r.b)(p.a,{points:e,lines:[n],mdxType:"Canvas"})})),Object(r.b)("h2",{id:"b-spline"},"B Spline"),Object(r.b)("h3",{id:"config-5"},"Config"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"name"),Object(r.b)("th",{parentName:"tr",align:null},"type"),Object(r.b)("th",{parentName:"tr",align:null},"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"k"),Object(r.b)("td",{parentName:"tr",align:null},"number"),Object(r.b)("td",{parentName:"tr",align:null},"Degree of spline. Default is ",Object(r.b)("inlineCode",{parentName:"td"},"3"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"knots"),Object(r.b)("td",{parentName:"tr",align:null},"number[]"),Object(r.b)("td",{parentName:"tr",align:null},"Knot vectors. length = n + k + 1. Default is ",Object(r.b)("inlineCode",{parentName:"td"},"an array of quasiUniform knots"),".")))),Object(r.b)("h3",{id:"method"},"Method"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"insertKnot(t)")),Object(r.b)("p",{parentName:"li"},"Insert knot and add new data point automatically."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"t")," ",Object(r.b)("em",{parentName:"p"},"number")),Object(r.b)("p",{parentName:"li"},"knot value, range is ",Object(r.b)("inlineCode",{parentName:"p"},"(0,1)")))))),Object(r.b)("h3",{id:"playground-5"},"Playground"),Object(r.b)(b.c,{__position:5,__code:"() => {\n  // import { BSpline, createQuasiUniformKnots } from '@anntopia/geometry'\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new BSpline(dataPoints)\n  spline.setStep(0.001)\n  spline.setConfig({\n    k: 4,\n    knots: createQuasiUniformKnots({ points: dataPoints, k: 4 }),\n  })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={[points]} />\n}",__scope:(N={props:y,DefaultLayout:l.a,Playground:b.c,Props:b.d,CubicSpline:o.i,CubicParameterSpline:o.h,BoundaryCondition:o.d,createQuasiUniformKnots:o.z,createNonUniformKnots:o.y,HermiteSpline:o.m,CardinalSpline:o.e,BezierSpline:o.c,BSpline:o.b,NURBS:o.u,Canvas:p.a,uniform:c.a},N.DefaultLayout=l.a,N._frontmatter=s,N),mdxType:"Playground"},(function(){var e=[50,250,200,150,100,50,250,70,400,50,450,250],t=new o.b(e);t.setStep(.001),t.setConfig({k:4,knots:Object(o.z)({points:e,k:4})});var n=t.getInterpolation();return Object(r.b)(p.a,{points:e,lines:[n],mdxType:"Canvas"})})),Object(r.b)("h2",{id:"nurbs"},"NURBS"),Object(r.b)("h3",{id:"config-6"},"Config"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"name"),Object(r.b)("th",{parentName:"tr",align:null},"type"),Object(r.b)("th",{parentName:"tr",align:null},"description"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"k"),Object(r.b)("td",{parentName:"tr",align:null},"number"),Object(r.b)("td",{parentName:"tr",align:null},"Same as the Config in ",Object(r.b)("a",{parentName:"td",href:"#b-spline"},"BSpine"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"knots"),Object(r.b)("td",{parentName:"tr",align:null},"number[]"),Object(r.b)("td",{parentName:"tr",align:null},"Same as the Config in ",Object(r.b)("a",{parentName:"td",href:"#b-spline"},"BSpine"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"w"),Object(r.b)("td",{parentName:"tr",align:null},"number[]"),Object(r.b)("td",{parentName:"tr",align:null},"Weight values. The length is the same as data points. Default is ",Object(r.b)("inlineCode",{parentName:"td"},"all 1 element array"),".")))),Object(r.b)("h3",{id:"method-1"},"Method"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"insertKnot(t)")),Object(r.b)("p",{parentName:"li"},"Insert knot and add new data point and weight automatically."),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"t")," ",Object(r.b)("em",{parentName:"p"},"number")),Object(r.b)("p",{parentName:"li"},"knot value, range is ",Object(r.b)("inlineCode",{parentName:"p"},"(0,1)")))))),Object(r.b)("h3",{id:"playground-6"},"Playground"),Object(r.b)(b.c,{__position:6,__code:"() => {\n  // import { NURBS, createNonUniformKnots } from '@anntopia/geometry'\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new NURBS(dataPoints)\n  spline.setStep(0.001)\n  spline.setConfig({\n    k: 4,\n    knots: createNonUniformKnots({ points: dataPoints, k: 4 }),\n  })\n  spline.insertKnot(0.35)\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={[points]} />\n}",__scope:(g={props:y,DefaultLayout:l.a,Playground:b.c,Props:b.d,CubicSpline:o.i,CubicParameterSpline:o.h,BoundaryCondition:o.d,createQuasiUniformKnots:o.z,createNonUniformKnots:o.y,HermiteSpline:o.m,CardinalSpline:o.e,BezierSpline:o.c,BSpline:o.b,NURBS:o.u,Canvas:p.a,uniform:c.a},g.DefaultLayout=l.a,g._frontmatter=s,g),mdxType:"Playground"},(function(){var e=[50,250,200,150,100,50,250,70,400,50,450,250],t=new o.u(e);t.setStep(.001),t.setConfig({k:4,knots:Object(o.y)({points:e,k:4})}),t.insertKnot(.35);var n=t.getInterpolation();return Object(r.b)(p.a,{points:e,lines:[n],mdxType:"Canvas"})})),Object(r.b)("h2",{id:"knot-functions"},"Knot Functions"),Object(r.b)("p",null,"Helper functions for creating knots of b-spline"),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",{parentName:"tr",align:null},"type"),Object(r.b)("th",{parentName:"tr",align:null},"function name"),Object(r.b)("th",{parentName:"tr",align:null},"example"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"Uniform"),Object(r.b)("td",{parentName:"tr",align:null},"createUniformKnots(param)"),Object(r.b)("td",{parentName:"tr",align:null},"[0, 0.2, 0.4, 0.6, 0.8, 1]")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"QuasiUniform"),Object(r.b)("td",{parentName:"tr",align:null},"createQuasiUniformKnots(param)"),Object(r.b)("td",{parentName:"tr",align:null},"[0, 0, 0, 1/3, 2/3, 1, 1, 1]")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"PiceceWise"),Object(r.b)("td",{parentName:"tr",align:null},"createPiceceWiseKnots(param)"),Object(r.b)("td",{parentName:"tr",align:null},"[0, 0, 0, 1/2, 1/2, 1, 1, 1]")),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",{parentName:"tr",align:null},"NonUniform"),Object(r.b)("td",{parentName:"tr",align:null},"createNonUniformKnots(param)"),Object(r.b)("td",{parentName:"tr",align:null},"[0, 0, 0, 0.34, 0.35, 0.66, 1, 1, 1]")))),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"param")," ",Object(r.b)("inlineCode",{parentName:"p"},"Object")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"points")," - ",Object(r.b)("inlineCode",{parentName:"p"},"number[]")),Object(r.b)("p",{parentName:"li"},"Data points array")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("strong",{parentName:"p"},"k")," - ",Object(r.b)("inlineCode",{parentName:"p"},"number")),Object(r.b)("p",{parentName:"li"},"Degree of spline"))),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"knots length = n(points number) + k(degree of spline) + 1")))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/geometry/curve.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-geometry-curve-mdx-8855d4b9bd7fa8547161.js.map