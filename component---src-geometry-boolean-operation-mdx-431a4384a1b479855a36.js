(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{uNqk:function(n,e,t){"use strict";t.r(e),t.d(e,"_frontmatter",(function(){return p})),t.d(e,"default",(function(){return g}));var o=t("IKa1"),i=t("ITlK"),s=t("r0ML"),l=t("V0Ug"),r=t("sN0p"),c=t("EeHy"),a=t("NIMi"),b=t("S48i"),p=(t("xH0s"),{});void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/geometry/boolean-operation.mdx"}});var y={_frontmatter:p},u=r.a;function g(n){var e,t,g,d,m=n.components,P=Object(i.a)(n,["components"]);return Object(l.b)(u,Object(o.a)({},y,P,{components:m,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"overview"},"Overview"),Object(l.b)("p",null,"Todo"),Object(l.b)("h2",{id:"line"},"Line"),Object(l.b)("h3",{id:"lines-intersection"},"Lines Intersection"),Object(l.b)(c.c,{__position:0,__code:"() => {\n  const lineA = [20, 50, 50, 120]\n  const lineB = [30, 300, 120, 30]\n  const intersect = LinesIntersection(\n    [lineA[0], lineA[1]],\n    [lineA[2], lineA[3]],\n    [lineB[0], lineB[1]],\n    [lineB[2], lineB[3]],\n  )\n  return (\n    <>\n      <Canvas lines={[lineA, lineB]} />\n      <div>intersect: {intersect ? intersect.join(', ') : 'null'} </div>\n    </>\n  )\n}",__scope:(e={props:P,DefaultLayout:r.a,Playground:c.c,Props:c.d,LinesIntersection:a.r,LineSegmentsIntersection:a.q,isPointInPolygon:a.B,isPolygonsIntersection:a.C,Canvas:b.a},e.DefaultLayout=r.a,e._frontmatter=p,e),mdxType:"Playground"},(function(){var n=[20,50,50,120],e=[30,300,120,30],t=Object(a.r)([n[0],n[1]],[n[2],n[3]],[e[0],e[1]],[e[2],e[3]]);return Object(l.b)(s.Fragment,null,Object(l.b)(b.a,{lines:[n,e],mdxType:"Canvas"}),Object(l.b)("div",null,"intersect: ",t?t.join(", "):"null"," "))})),Object(l.b)("h3",{id:"line-segments-intersection"},"Line Segments Intersection"),Object(l.b)(c.c,{__position:1,__code:"() => {\n  const lineA = [20, 50, 50, 120]\n  const lineB = [30, 300, 120, 30]\n  const intersect = LineSegmentsIntersection(\n    [lineA[0], lineA[1]],\n    [lineA[2], lineA[3]],\n    [lineB[0], lineB[1]],\n    [lineB[2], lineB[3]],\n  )\n  return (\n    <>\n      <Canvas lines={[lineA, lineB]} />\n      <div>intersect: {intersect ? intersect.join(', ') : 'null'} </div>\n    </>\n  )\n}",__scope:(t={props:P,DefaultLayout:r.a,Playground:c.c,Props:c.d,LinesIntersection:a.r,LineSegmentsIntersection:a.q,isPointInPolygon:a.B,isPolygonsIntersection:a.C,Canvas:b.a},t.DefaultLayout=r.a,t._frontmatter=p,t),mdxType:"Playground"},(function(){var n=[20,50,50,120],e=[30,300,120,30],t=Object(a.q)([n[0],n[1]],[n[2],n[3]],[e[0],e[1]],[e[2],e[3]]);return Object(l.b)(s.Fragment,null,Object(l.b)(b.a,{lines:[n,e],mdxType:"Canvas"}),Object(l.b)("div",null,"intersect: ",t?t.join(", "):"null"," "))})),Object(l.b)("h2",{id:"polygon"},"Polygon"),Object(l.b)("h3",{id:"is-point-in-polygon"},"Is Point In Polygon"),Object(l.b)(c.c,{__position:2,__code:"() => {\n  const point = [110, 90]\n  const polygon = [100, 20, 30, 200, 180, 270]\n  const isInPolygon = isPointInPolygon(point, polygon)\n  return (\n    <>\n      <Canvas points={point} polygons={[polygon]} />\n      <div>Point in polygon: {`${isInPolygon}`} </div>\n    </>\n  )\n}",__scope:(g={props:P,DefaultLayout:r.a,Playground:c.c,Props:c.d,LinesIntersection:a.r,LineSegmentsIntersection:a.q,isPointInPolygon:a.B,isPolygonsIntersection:a.C,Canvas:b.a},g.DefaultLayout=r.a,g._frontmatter=p,g),mdxType:"Playground"},(function(){var n=[110,90],e=[100,20,30,200,180,270],t=Object(a.B)(n,e);return Object(l.b)(s.Fragment,null,Object(l.b)(b.a,{points:n,polygons:[e],mdxType:"Canvas"}),Object(l.b)("div",null,"Point in polygon: ",""+t," "))})),Object(l.b)("h3",{id:"is-polygons-intersection"},"Is Polygons Intersection"),Object(l.b)(c.c,{__position:3,__code:"() => {\n  const polygonA = [50, 70, 200, 30, 100, 200]\n  const polygonB = [100, 20, 30, 200, 180, 270]\n  const isPolyonIntersection = isPolygonsIntersection(polygonA, polygonB)\n  return (\n    <>\n      <Canvas polygons={[polygonA, polygonB]} />\n      <div>Polygon intersection: {`${isPolyonIntersection}`} </div>\n    </>\n  )\n}",__scope:(d={props:P,DefaultLayout:r.a,Playground:c.c,Props:c.d,LinesIntersection:a.r,LineSegmentsIntersection:a.q,isPointInPolygon:a.B,isPolygonsIntersection:a.C,Canvas:b.a},d.DefaultLayout=r.a,d._frontmatter=p,d),mdxType:"Playground"},(function(){var n=[50,70,200,30,100,200],e=[100,20,30,200,180,270],t=Object(a.C)(n,e);return Object(l.b)(s.Fragment,null,Object(l.b)(b.a,{polygons:[n,e],mdxType:"Canvas"}),Object(l.b)("div",null,"Polygon intersection: ",""+t," "))})))}void 0!==g&&g&&g===Object(g)&&Object.isExtensible(g)&&!g.hasOwnProperty("__filemeta")&&Object.defineProperty(g,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/geometry/boolean-operation.mdx"}}),g.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-geometry-boolean-operation-mdx-431a4384a1b479855a36.js.map