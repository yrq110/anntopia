(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{bCqL:function(n,e,t){"use strict";t.r(e),t.d(e,"_frontmatter",(function(){return c})),t.d(e,"default",(function(){return b}));var i=t("IKa1"),a=t("ITlK"),o=(t("r0ML"),t("V0Ug")),r=t("sN0p"),s=t("EeHy"),p=t("vLsX"),l=t("S48i"),c=(t("xH0s"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/geometry/curve.mdx"}});var u={_frontmatter:c},d=r.a;function b(n){var e,t,b,m,S,C,f,y=n.components,B=Object(a.a)(n,["components"]);return Object(o.b)(d,Object(i.a)({},u,B,{components:y,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"overview"},"Overview"),Object(o.b)("p",null,"Provide multiple ways to do spline interpolation:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Cubic Spline"),Object(o.b)("li",{parentName:"ul"},"Hermite Spline"),Object(o.b)("li",{parentName:"ul"},"Bezier Spline"),Object(o.b)("li",{parentName:"ul"},"B Spline")),Object(o.b)("h3",{id:"common-params--methods"},"Common Params & Methods:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"step"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-js"},"const spline = new SplineCtor(dataPoints)\nspline.setStep(0.001)\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"getInterpolation()"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-js"},"const points = spline.getInterpolation()\n")))),Object(o.b)("h2",{id:"cubicspline"},"CubicSpline"),Object(o.b)(s.c,{__position:0,__code:"() => {\n  const dataPoints = [50, 250, 100, 50, 200, 150, 250, 70, 380, 100, 450, 250]\n  const spline = new CubicSpline(dataPoints)\n  spline.setConfig({\n    boundary: BoundaryCondition.Clamped,\n  })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={points} />\n}",__scope:(e={props:B,DefaultLayout:r.a,Playground:s.c,Props:s.d,CubicSpline:p.CubicSpline,CubicParameterSpline:p.CubicParameterSpline,BoundaryCondition:p.BoundaryCondition,createQuasiUniformKnots:p.createQuasiUniformKnots,createNonUniformKnots:p.createNonUniformKnots,HermiteSpline:p.HermiteSpline,CardinalSpline:p.CardinalSpline,BezierSpline:p.BezierSpline,BSpline:p.BSpline,NURBS:p.NURBS,Canvas:l.a},e.DefaultLayout=r.a,e._frontmatter=c,e),mdxType:"Playground"},(function(){var n=[50,250,100,50,200,150,250,70,380,100,450,250],e=new p.CubicSpline(n);e.setConfig({boundary:p.BoundaryCondition.Clamped});var t=e.getInterpolation();return Object(o.b)(l.a,{points:n,lines:t,mdxType:"Canvas"})})),Object(o.b)("h2",{id:"cubicparameterspline"},"CubicParameterSpline"),Object(o.b)(s.c,{__position:1,__code:"() => {\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new CubicParameterSpline(dataPoints)\n  spline.setConfig({\n    boundary: BoundaryCondition.NotAKnot,\n  })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={points} />\n}",__scope:(t={props:B,DefaultLayout:r.a,Playground:s.c,Props:s.d,CubicSpline:p.CubicSpline,CubicParameterSpline:p.CubicParameterSpline,BoundaryCondition:p.BoundaryCondition,createQuasiUniformKnots:p.createQuasiUniformKnots,createNonUniformKnots:p.createNonUniformKnots,HermiteSpline:p.HermiteSpline,CardinalSpline:p.CardinalSpline,BezierSpline:p.BezierSpline,BSpline:p.BSpline,NURBS:p.NURBS,Canvas:l.a},t.DefaultLayout=r.a,t._frontmatter=c,t),mdxType:"Playground"},(function(){var n=[50,250,200,150,100,50,250,70,400,50,450,250],e=new p.CubicParameterSpline(n);e.setConfig({boundary:p.BoundaryCondition.NotAKnot});var t=e.getInterpolation();return Object(o.b)(l.a,{points:n,lines:t,mdxType:"Canvas"})})),Object(o.b)("h2",{id:"hermitespline"},"HermiteSpline"),Object(o.b)(s.c,{__position:2,__code:"() => {\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const derivatives = [100, 50, 0, -100, 200, 10, 0, 100, 100, 20, 0, -100]\n  const spline = new HermiteSpline(dataPoints)\n  spline.setConfig({ derivatives })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={points} />\n}",__scope:(b={props:B,DefaultLayout:r.a,Playground:s.c,Props:s.d,CubicSpline:p.CubicSpline,CubicParameterSpline:p.CubicParameterSpline,BoundaryCondition:p.BoundaryCondition,createQuasiUniformKnots:p.createQuasiUniformKnots,createNonUniformKnots:p.createNonUniformKnots,HermiteSpline:p.HermiteSpline,CardinalSpline:p.CardinalSpline,BezierSpline:p.BezierSpline,BSpline:p.BSpline,NURBS:p.NURBS,Canvas:l.a},b.DefaultLayout=r.a,b._frontmatter=c,b),mdxType:"Playground"},(function(){var n=[50,250,200,150,100,50,250,70,400,50,450,250],e=new p.HermiteSpline(n);e.setConfig({derivatives:[100,50,0,-100,200,10,0,100,100,20,0,-100]});var t=e.getInterpolation();return Object(o.b)(l.a,{points:n,lines:t,mdxType:"Canvas"})})),Object(o.b)("h2",{id:"cardinalspline"},"CardinalSpline"),Object(o.b)(s.c,{__position:3,__code:"() => {\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new CardinalSpline(dataPoints)\n  spline.setConfig({ tension: 0.2 })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={points} />\n}",__scope:(m={props:B,DefaultLayout:r.a,Playground:s.c,Props:s.d,CubicSpline:p.CubicSpline,CubicParameterSpline:p.CubicParameterSpline,BoundaryCondition:p.BoundaryCondition,createQuasiUniformKnots:p.createQuasiUniformKnots,createNonUniformKnots:p.createNonUniformKnots,HermiteSpline:p.HermiteSpline,CardinalSpline:p.CardinalSpline,BezierSpline:p.BezierSpline,BSpline:p.BSpline,NURBS:p.NURBS,Canvas:l.a},m.DefaultLayout=r.a,m._frontmatter=c,m),mdxType:"Playground"},(function(){var n=[50,250,200,150,100,50,250,70,400,50,450,250],e=new p.CardinalSpline(n);e.setConfig({tension:.2});var t=e.getInterpolation();return Object(o.b)(l.a,{points:n,lines:t,mdxType:"Canvas"})})),Object(o.b)("h2",{id:"bezierspline"},"BezierSpline"),Object(o.b)(s.c,{__position:4,__code:"() => {\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new BezierSpline(dataPoints)\n  spline.setConfig({ tension: 0.7 })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={points} />\n}",__scope:(S={props:B,DefaultLayout:r.a,Playground:s.c,Props:s.d,CubicSpline:p.CubicSpline,CubicParameterSpline:p.CubicParameterSpline,BoundaryCondition:p.BoundaryCondition,createQuasiUniformKnots:p.createQuasiUniformKnots,createNonUniformKnots:p.createNonUniformKnots,HermiteSpline:p.HermiteSpline,CardinalSpline:p.CardinalSpline,BezierSpline:p.BezierSpline,BSpline:p.BSpline,NURBS:p.NURBS,Canvas:l.a},S.DefaultLayout=r.a,S._frontmatter=c,S),mdxType:"Playground"},(function(){var n=[50,250,200,150,100,50,250,70,400,50,450,250],e=new p.BezierSpline(n);e.setConfig({tension:.7});var t=e.getInterpolation();return Object(o.b)(l.a,{points:n,lines:t,mdxType:"Canvas"})})),Object(o.b)("h2",{id:"bspine"},"BSpine"),Object(o.b)(s.c,{__position:5,__code:"() => {\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new BSpline(dataPoints)\n  spline.setStep(0.001)\n  spline.setConfig({\n    k: 4,\n    knots: createQuasiUniformKnots({ points: dataPoints, k: 4 }),\n  })\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={points} />\n}",__scope:(C={props:B,DefaultLayout:r.a,Playground:s.c,Props:s.d,CubicSpline:p.CubicSpline,CubicParameterSpline:p.CubicParameterSpline,BoundaryCondition:p.BoundaryCondition,createQuasiUniformKnots:p.createQuasiUniformKnots,createNonUniformKnots:p.createNonUniformKnots,HermiteSpline:p.HermiteSpline,CardinalSpline:p.CardinalSpline,BezierSpline:p.BezierSpline,BSpline:p.BSpline,NURBS:p.NURBS,Canvas:l.a},C.DefaultLayout=r.a,C._frontmatter=c,C),mdxType:"Playground"},(function(){var n=[50,250,200,150,100,50,250,70,400,50,450,250],e=new p.BSpline(n);e.setStep(.001),e.setConfig({k:4,knots:Object(p.createQuasiUniformKnots)({points:n,k:4})});var t=e.getInterpolation();return Object(o.b)(l.a,{points:n,lines:t,mdxType:"Canvas"})})),Object(o.b)("h2",{id:"nurbs"},"NURBS"),Object(o.b)(s.c,{__position:6,__code:"() => {\n  const dataPoints = [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]\n  const spline = new NURBS(dataPoints)\n  spline.setStep(0.001)\n  spline.setConfig({\n    k: 4,\n    knots: createNonUniformKnots({ points: dataPoints, k: 4 }),\n  })\n  spline.insertKnot(0.35)\n  const points = spline.getInterpolation()\n  return <Canvas points={dataPoints} lines={points} />\n}",__scope:(f={props:B,DefaultLayout:r.a,Playground:s.c,Props:s.d,CubicSpline:p.CubicSpline,CubicParameterSpline:p.CubicParameterSpline,BoundaryCondition:p.BoundaryCondition,createQuasiUniformKnots:p.createQuasiUniformKnots,createNonUniformKnots:p.createNonUniformKnots,HermiteSpline:p.HermiteSpline,CardinalSpline:p.CardinalSpline,BezierSpline:p.BezierSpline,BSpline:p.BSpline,NURBS:p.NURBS,Canvas:l.a},f.DefaultLayout=r.a,f._frontmatter=c,f),mdxType:"Playground"},(function(){var n=[50,250,200,150,100,50,250,70,400,50,450,250],e=new p.NURBS(n);e.setStep(.001),e.setConfig({k:4,knots:Object(p.createNonUniformKnots)({points:n,k:4})}),e.insertKnot(.35);var t=e.getInterpolation();return Object(o.b)(l.a,{points:n,lines:t,mdxType:"Canvas"})})),Object(o.b)("h2",{id:"custom-curve"},"Custom Curve"),Object(o.b)("p",null,"If you want to create a new type curve/spline, can extend AbstractCurve to implement."))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/geometry/curve.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-geometry-curve-mdx-0f433256f3890d2cc756.js.map