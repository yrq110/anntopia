import{d as k,r as u,o as f,c as C,a as d,u as o}from"./app.e84b2b0f.js";import{K as m,q as S,B as b,F as w,P as g,_,A as v,W as B,x as y,e as a,r as x}from"./index.3a70c7f4.js";const h=k({props:{type:{type:String,required:!1}},setup(r){const i=r,{type:p}=i;let n=[50,250,200,150,100,50,250,70,400,50,450,250],e;switch(p){case"CubicSpline":{n=[50,250,100,50,200,150,250,70,380,100,450,250],e=new x(n),e.setConfig({boundary:a.Clamped});break}case"CubicParameterSpline":{e=new y(n),e.setConfig({boundary:a.NotAKnot});break}case"CatmullRomSpline":{e=new B(n),e.setConfig({tension:.7,closed:!0}),e.setStep(.001);break}case"HermiteSpline":{const s=[100,50,0,-100,200,10,0,100,100,20,0,-100];e=new v(n),e.setConfig({derivatives:s});break}case"CardinalSpline":{e=new _(n),e.setConfig({tension:.2});break}case"BezierSpline":{e=new g(n),e.setConfig({tension:.7,closed:!0}),e.setStep(.001);break}case"BSpline":{e=new b(n),e.setStep(.001),e.setConfig({k:4,knots:w({points:n,k:4})});break}case"NURBS":{e=new m(n),e.setStep(.001),e.setConfig({k:4,knots:S({points:n,k:4})}),e.insertKnot(.35);break}}const t=e==null?void 0:e.getInterpolation(),c=t?[t]:[];return(s,K)=>{const l=u("canvas-wrapper");return f(),C("div",null,[d(l,{points:o(n),lines:o(c)},null,8,["points","lines"])])}}});export{h as default};
