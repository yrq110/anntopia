import{r as s,o,c as i,a,F as r,h as t,b as e,g as p}from"./app.e84b2b0f.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const c={},l=t(`<h1 id="curve" tabindex="-1"><a class="header-anchor" href="#curve" aria-hidden="true">#</a> Curve</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>Contains these main types of interpolating spline:</p><ul><li><a href="#cubic-spline">Cubic Spline</a></li><li><a href="#hermite-spline">Hermite Spline</a></li><li><a href="#bezier-spline">Bezier Spline</a></li><li><a href="#b-spline">B Spline</a></li></ul><h3 id="common-props" tabindex="-1"><a class="header-anchor" href="#common-props" aria-hidden="true">#</a> Common Props</h3><ul><li><strong>dataPoints</strong> - The data points of spline</li></ul><h3 id="common-methods" tabindex="-1"><a class="header-anchor" href="#common-methods" aria-hidden="true">#</a> Common Methods</h3><ul><li>constructor(dataPoints: number[], config?: Partial&lt;Config&gt;, step?: number)</li><li>getInterpolation(forceUpdate: boolean = true)</li><li>setConfig(config: Object) &amp; getConfig()</li><li>setStep(step: number) &amp; getStep()</li></ul><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BezierSpline <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@anntopia/geometry&#39;</span>
<span class="token keyword">const</span> dataPoints <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span>
  <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span>
  <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span>
  <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span>
  <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span>
  <span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
<span class="token keyword">const</span> spline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BezierSpline</span><span class="token punctuation">(</span>dataPoints<span class="token punctuation">,</span> <span class="token punctuation">{</span> tension<span class="token operator">:</span> <span class="token number">0.5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span>
<span class="token keyword">let</span> points <span class="token operator">=</span> spline<span class="token punctuation">.</span><span class="token function">getInterpolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// get interpolatin points</span>
<span class="token comment">// spline.dataPoints: [50, 250, 200, 150, 100, 50, 250, 70, 400, 50, 450, 250]</span>
<span class="token comment">// points: [50, 250, 52.67857360839844, 249.23570251464844, 55.333335876464844, 248.4666748046875, ...]</span>
spline<span class="token punctuation">.</span><span class="token function">setConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span> tension<span class="token operator">:</span> <span class="token number">0.7</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// change config</span>
spline<span class="token punctuation">.</span><span class="token function">setStep</span><span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span> <span class="token comment">// change step</span>
points <span class="token operator">=</span> spline<span class="token punctuation">.</span><span class="token function">getInterpolation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// get interpolating points with the new config and step</span>
<span class="token comment">// points: [50, 250, 50.256561279296875, 249.97325134277344, 50.512908935546875, 249.94638061523438, ...]</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="cubic-spline" tabindex="-1"><a class="header-anchor" href="#cubic-spline" aria-hidden="true">#</a> Cubic Spline</h2>`,11),h=t('<h3 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> Config</h3><table><thead><tr><th>name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>boundary</td><td><code>0 - natural; 1 - clamped; 2 - not-a-knot</code></td><td>Boundary type. Default is <code>0</code></td></tr><tr><td>derivatives</td><td><code>[number, number]</code></td><td>First derivatives of x in start and end points. Need to set this if the boundary type is 0(natural). Default is <code>[0, 0]</code></td></tr></tbody></table><h2 id="cubic-parameter-spline" tabindex="-1"><a class="header-anchor" href="#cubic-parameter-spline" aria-hidden="true">#</a> Cubic Parameter Spline</h2>',3),u=t('<h3 id="config-1" tabindex="-1"><a class="header-anchor" href="#config-1" aria-hidden="true">#</a> Config</h3><p>Same as the Config in <a href="#cubic-spline">CubicSpline</a></p><h2 id="hermite-spline" tabindex="-1"><a class="header-anchor" href="#hermite-spline" aria-hidden="true">#</a> Hermite Spline</h2>',3),m=t('<h3 id="config-2" tabindex="-1"><a class="header-anchor" href="#config-2" aria-hidden="true">#</a> Config</h3><table><thead><tr><th>name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>derivatives</td><td>number[]</td><td>First derivatives of x and y in every data points.</td></tr></tbody></table><h2 id="cardinal-spline" tabindex="-1"><a class="header-anchor" href="#cardinal-spline" aria-hidden="true">#</a> Cardinal Spline</h2>',3),b=t('<h3 id="config-3" tabindex="-1"><a class="header-anchor" href="#config-3" aria-hidden="true">#</a> Config</h3><table><thead><tr><th>name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>vs</td><td>[number, number]</td><td>Virtual start point. Default position has the offset by [0.01,0.01] from the first data point.</td></tr><tr><td>ve</td><td>[number, number]</td><td>Virtual end point. Default position has the offset by [0.01,0.01] from the end data point.</td></tr><tr><td>tension</td><td>number</td><td>Tension value, range is <code>[0,1]</code>. Default is <code>0.1</code>.</td></tr></tbody></table><h2 id="bezier-spline" tabindex="-1"><a class="header-anchor" href="#bezier-spline" aria-hidden="true">#</a> Bezier Spline</h2><h3 id="config-4" tabindex="-1"><a class="header-anchor" href="#config-4" aria-hidden="true">#</a> Config</h3><table><thead><tr><th>name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>tension</td><td>number</td><td>Tension value, range is <code>[0,1]</code>. Default is <code>0.5</code>.</td></tr><tr><td>closed</td><td>boolean</td><td>Closed curve. Default is <code>false</code>.</td></tr></tbody></table><h2 id="catmullrom-spline" tabindex="-1"><a class="header-anchor" href="#catmullrom-spline" aria-hidden="true">#</a> CatmullRom Spline</h2>',6),f=e("h2",{id:"b-spline",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#b-spline","aria-hidden":"true"},"#"),p(" B Spline")],-1),k=t('<h3 id="config-5" tabindex="-1"><a class="header-anchor" href="#config-5" aria-hidden="true">#</a> Config</h3><table><thead><tr><th>name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>k</td><td>number</td><td>Degree of spline. Default is <code>3</code></td></tr><tr><td>knots</td><td>number[]</td><td>Knot vectors. length = n + k + 1. Default is <code>an array of quasiUniform knots</code>.</td></tr></tbody></table><h3 id="method" tabindex="-1"><a class="header-anchor" href="#method" aria-hidden="true">#</a> Method</h3><ul><li><p><strong>insertKnot(t)</strong></p><p>Insert knot and add new data point automatically.</p><ul><li><p><strong>t</strong> <em>number</em></p><p>knot value, range is <code>(0,1)</code></p></li></ul></li></ul><h3 id="knot-functions" tabindex="-1"><a class="header-anchor" href="#knot-functions" aria-hidden="true">#</a> Knot Functions</h3><p>Helper functions for creating knots of b-spline (includes NURBS)</p><table><thead><tr><th>type</th><th>function name</th><th>example</th></tr></thead><tbody><tr><td>Uniform</td><td>createUniformKnots(param)</td><td>[0, 0.2, 0.4, 0.6, 0.8, 1]</td></tr><tr><td>QuasiUniform</td><td>createQuasiUniformKnots(param)</td><td>[0, 0, 0, 1/3, 2/3, 1, 1, 1]</td></tr><tr><td>PiceceWise</td><td>createPiceceWiseKnots(param)</td><td>[0, 0, 0, 1/2, 1/2, 1, 1, 1]</td></tr><tr><td>NonUniform</td><td>createNonUniformKnots(param)</td><td>[0, 0, 0, 0.34, 0.35, 0.66, 1, 1, 1]</td></tr></tbody></table><p><strong>param</strong> <code>Object</code></p><ul><li><p><strong>points</strong> - <code>number[]</code></p><p>Data points array</p></li><li><p><strong>k</strong> - <code>number</code></p><p>Degree of spline</p></li></ul><p><code>knots length = n(points number) + k(degree of spline) + 1</code></p><h2 id="nurbs" tabindex="-1"><a class="header-anchor" href="#nurbs" aria-hidden="true">#</a> NURBS</h2>',11),g=t('<h3 id="config-6" tabindex="-1"><a class="header-anchor" href="#config-6" aria-hidden="true">#</a> Config</h3><table><thead><tr><th>name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>k</td><td>number</td><td>Same as the Config in <a href="#b-spline">BSpine</a></td></tr><tr><td>knots</td><td>number[]</td><td>Same as the Config in <a href="#b-spline">BSpine</a></td></tr><tr><td>w</td><td>number[]</td><td>Weight values. The length is the same as data points. Default is <code>all 1 element array</code>.</td></tr></tbody></table><h3 id="method-1" tabindex="-1"><a class="header-anchor" href="#method-1" aria-hidden="true">#</a> Method</h3><ul><li><p><strong>insertKnot(t)</strong></p><p>Insert knot and add new data point and weight automatically.</p><ul><li><p><strong>t</strong> <em>number</em></p><p>knot value, range is <code>(0,1)</code></p></li></ul></li></ul>',4);function y(v,x){const n=s("Curve");return o(),i(r,null,[l,a(n,{type:"CubicSpline",id:"23"}),h,a(n,{type:"CubicParameterSpline"}),u,a(n,{type:"HermiteSpline"}),m,a(n,{type:"CardinalSpline"}),b,a(n,{type:"CatmullRomSpline"}),f,a(n,{type:"BSpline"}),k,a(n,{type:"NURBS"}),g],64)}var _=d(c,[["render",y]]);export{_ as default};
