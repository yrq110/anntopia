{"version":3,"sources":["webpack:///../src/geometry/triangulation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Chan","DelaunayTriangulation","PolygonTriangulation","MinWeightTriangulation","Canvas","random","points","triangles","vertices","forEach","triangle","push","flat","polygons","polygon","isMDXComponent"],"mappings":"kTAYaA,G,UAAe,S,gNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,UAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,kBACE,GAAM,YADR,YAGA,6BACA,kBACE,GAAM,yBADR,yBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,iRAAkRC,SAAO,GAC1TJ,QACAH,kBACAQ,eACAC,UACAC,YACAC,8CACAC,4CACAC,gDACAC,WACAC,YAV0T,gBAW1Tf,IAX0T,EAY1TH,eAZ0T,GAazTO,QAAQ,eACZ,WACK,IAAMY,EAASD,YAAO,GAAI,IAAK,IAAK,IAAK,GAAI,IACvCE,EAAYN,gCAAsBK,GAClCE,EAAW,GAIjB,OAHAD,EAAUE,SAAQ,SAAAC,GAChBF,EAASG,KAAKD,EAASE,WAElB,YAAC,IAAD,CAAQN,OAAQA,EAAQO,SAAUL,EAAUd,QAAQ,cAG/D,kBACE,GAAM,wBADR,wBAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,+MAAgNC,SAAO,GACxPJ,QACAH,kBACAQ,eACAC,UACAC,YACAC,8CACAC,4CACAC,gDACAC,WACAC,YAVwP,gBAWxPf,IAXwP,EAYxPH,eAZwP,GAavPO,QAAQ,eACZ,WACK,IAAMY,EAASD,YAAO,GAAI,IAAK,IAAK,IAAK,GAAI,IACvCS,EAAUd,eAAKM,GACfC,EAAYL,+BAAqBY,GACvC,OAAO,YAAC,IAAD,CAAQR,OAAQQ,EAASD,SAAUN,EAAWb,QAAQ,cAGjE,kBACE,GAAM,0BADR,0BAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,iNAAkNC,SAAO,GAC1PJ,QACAH,kBACAQ,eACAC,UACAC,YACAC,8CACAC,4CACAC,gDACAC,WACAC,YAV0P,gBAW1Pf,IAX0P,EAY1PH,eAZ0P,GAazPO,QAAQ,eACZ,WACK,IAAMY,EAASD,YAAO,GAAI,IAAK,IAAK,IAAK,GAAI,IACvCS,EAAUd,eAAKM,GACfC,EAAYJ,iCAAuBW,GACzC,OAAO,YAAC,IAAD,CAAQR,OAAQQ,EAASD,SAAUN,EAAWb,QAAQ,oB,8MAOrEH,EAAWwB,gBAAiB","file":"component---src-geometry-triangulation-mdx-36c6e06d773d97fae9a1.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/didi/Desktop/project/anntopia/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Chan, DelaunayTriangulation, PolygonTriangulation, MinWeightTriangulation } from '@anntopia/geometry';\nimport Canvas from '../components/Canvas';\nimport { random } from '../components/util';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h2>\n    <p>{`Todo`}</p>\n    <h2 {...{\n      \"id\": \"delaunaytriangulation\"\n    }}>{`DelaunayTriangulation`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const points = random(40, 100, 350, 250, 50, 50)\\n  const triangles = DelaunayTriangulation(points)\\n  const vertices = []\\n  triangles.forEach(triangle => {\\n    vertices.push(triangle.flat())\\n  })\\n  return <Canvas points={points} polygons={vertices} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Chan,\n      DelaunayTriangulation,\n      PolygonTriangulation,\n      MinWeightTriangulation,\n      Canvas,\n      random,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const points = random(40, 100, 350, 250, 50, 50);\n        const triangles = DelaunayTriangulation(points);\n        const vertices = [];\n        triangles.forEach(triangle => {\n          vertices.push(triangle.flat());\n        });\n        return <Canvas points={points} polygons={vertices} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"polygontriangulation\"\n    }}>{`PolygonTriangulation`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const points = random(40, 100, 350, 250, 50, 50)\\n  const polygon = Chan(points)\\n  const triangles = PolygonTriangulation(polygon)\\n  return <Canvas points={polygon} polygons={triangles} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Chan,\n      DelaunayTriangulation,\n      PolygonTriangulation,\n      MinWeightTriangulation,\n      Canvas,\n      random,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const points = random(40, 100, 350, 250, 50, 50);\n        const polygon = Chan(points);\n        const triangles = PolygonTriangulation(polygon);\n        return <Canvas points={polygon} polygons={triangles} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"minweighttriangulation\"\n    }}>{`MinWeightTriangulation`}</h2>\n    <Playground __position={2} __code={'() => {\\n  const points = random(40, 100, 350, 250, 50, 50)\\n  const polygon = Chan(points)\\n  const triangles = MinWeightTriangulation(polygon)\\n  return <Canvas points={polygon} polygons={triangles} />\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Chan,\n      DelaunayTriangulation,\n      PolygonTriangulation,\n      MinWeightTriangulation,\n      Canvas,\n      random,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const points = random(40, 100, 350, 250, 50, 50);\n        const polygon = Chan(points);\n        const triangles = MinWeightTriangulation(polygon);\n        return <Canvas points={polygon} polygons={triangles} mdxType=\"Canvas\" />;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}